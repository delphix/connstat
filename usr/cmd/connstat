#!/usr/bin/env python3
#
# Copyright (c) 2018, 2019 by Delphix. All rights reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

# Displays selected data from /proc/net/stats_tcp
import argparse
import time
import os
import sys
from datetime import datetime


class ParsePositiveIntegerAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        if values <= 0:
            if (option_string == '--count' or option_string == '-c'):
                dest_string = 'count'
            else:
                dest_string = 'interval'

            sys.exit(dest_string + ' must be > 0')
        setattr(namespace, self.dest, values)


class Field:

    @property
    def name(self):
        return self.__name

    #
    # The index of the field in /proc/net/stats_tcp output, or -1 if /proc
    # doesn't support the field.
    #
    @property
    def index(self):
        return self.__index

    @index.setter
    def index(self, index):
        self.__index = index

    # The column width that connstat should use to output the field
    @property
    def print_width(self):
        return self.__print_width

    # Value used to filter output based on this field
    @property
    def filter(self):
        return self.__filter

    @filter.setter
    def filter(self, filter):
        self.__filter = filter

    def __init__(self, name, print_width):
        self.__name = name
        self.__index = -1
        self.__print_width = print_width
        self.__filter = None


def lazy_load_module():
    lsmod = os.system("lsmod | grep connstat > /dev/null")
    if lsmod != 0:
        if not args.parsable:
            print("Loading connstat kernel module")
        os.system("sudo depmod;sudo modprobe connstat")


def initialize_fields():
    """Return a dictionary of supported Field objects keyed by field name."""
    fields = {}
    #
    # Tuples of ( field_name, field_width ). The field names must match the
    # strings in the header of the output of /proc/net/stats_tcp.
    #
    field_info_list = [
        ('laddr', 15),
        ('lport', 6),
        ('raddr', 15),
        ('rport', 6),
        ('state', 12),
        ('inbytes', 11),
        ('insegs', 11),
        ('outbytes', 11),
        ('outsegs', 11),
        ('retranssegs', 12),
        ('suna', 11),
        ('unsent', 11),
        ('swnd', 11),
        ('cwnd', 11),
        ('rwnd', 11),
        ('mss', 6),
        ('rto', 8),
        ('rtt', 8),
        ('rxqueue', 11)
        ]

    for field_info in field_info_list:
        field_name = field_info[0]
        field_width = field_info[1]
        fields[field_name] = Field(field_name, field_width)

    return fields


def filter_skip(line_str_list):
    i = 0
    for value in line_str_list:
        field = proc_fields[i]
        if (field.filter and field.filter != value):
            return True
        i += 1
    return False


def loopback_skip(line_str_list):
    if args.no_loopback:
        laddr_index = fields['laddr'].index
        laddr = line_str_list[laddr_index].split('.')
        if (laddr[0] == '127'):
            return True
    return False


def discover_proc_fields(stats_filename):
    """Discover which fields are output by /proc/net/stats_tcp

    This returns a list of Field objects sorted in the order output by
    /proc/net/stats_tcp.
    """
    proc_fields = []
    with open(stats_filename) as f:
        proc_field_names = f.readline().strip().split(',')
    #
    # Iterate over all of the fields in the header and build an associated
    # representative list of Field objects.
    #
    i = 0
    for field_name in proc_field_names:
        if field_name in fields:
            field = fields[field_name]
        else:
            # The kernel is outputing a field that we don't know about.
            field = Field(field_name, 0)
        field.index = i
        proc_fields.append(field)
        i += 1
    return proc_fields


#
# Read the entries from /proc/net/stats_tcp and regurgitate
# the data in tabular form; applying options to filter out
# lines based on values, select which fields to display and
# in what order and to use a human readable or parsable mode.
#
def connstat_regurgitate(stats_filename):
    headings_line = True
    table_str = ""
    unique_strings = ""
    for line_in in open(stats_filename):
        line_str_list = line_in.strip().split(',')
        line_out = ""
        dup_check_line = ""

        # Omit headings(first) line for parsable output
        if args.parsable and headings_line:
            headings_line = False
            continue

        # Skip filtered out lines; doesn't apply to headings
        if not headings_line and (loopback_skip(line_str_list) or
                                  filter_skip(line_str_list)):
            continue
        headings_line = False

        # Ignore duplicate lines
        for f in unique_fields:
            dup_check_line += line_str_list[f.index]
        if dup_check_line in unique_strings:
            continue
        unique_strings += dup_check_line + '\n'

        # Print selected fields using specified format
        first_field = True
        for f in output_fields:
            if args.parsable:
                if not first_field:
                    line_out += ','
                line_out += line_str_list[f.index]
            else:
                sformat = "{: >" + str(f.print_width) + "}"
                line_out += sformat.format(line_str_list[f.index], format)
            first_field = False
        table_str += line_out + '\n'

    return table_str


parser = argparse.ArgumentParser(prog='connstat')

parser.add_argument('-c', '--count', action=ParsePositiveIntegerAction,
                    type=int, help='Only print COUNT reports')
parser.add_argument('-e', '--established', action='store_true', default=False,
                    help='Only display established connections')
parser.add_argument('-F', '--filter', action='store',
                    help='Only display connections that match FILTER')
parser.add_argument('-i', '--interval', action=ParsePositiveIntegerAction,
                    type=int, dest='SECONDS',
                    help='Report once every SECONDS seconds')
parser.add_argument('-L', '--no-loopback', action='store_true', default=False,
                    help='Omit loopback connections')
parser.add_argument('-o', '--output', action='store', dest='FIELDS',
                    help='Restrict output to the comma-separated list'
                    ' of fields specified')
parser.add_argument('-P', '--parsable', action='store_true', default=False,
                    help='Parsable output mode')
parser.add_argument('-T', '--timestamp', action='store', dest='TS_TYPE',
                    help='Display a timestamp for each iteration',
                    choices=['u', 'd'])

args = parser.parse_args()

if args.parsable and not args.FIELDS:
    sys.exit('parsable output requires \'-o\'')

if args.parsable and args.FIELDS == 'all':
    sys.exit('\'-o all\' is invalid with parsable output')

if args.count:
    if not args.SECONDS:
        sys.exit('interval must be specified if count is specified')
    count_index = args.count

# The STATS_FILENAME variable is used for unit testing.
if 'STATS_FILENAME' in os.environ:
    stats_filename = os.environ['STATS_FILENAME']
    test_mode = True
else:
    stats_filename = '/proc/net/stats_tcp'
    test_mode = False
    lazy_load_module()

# fields is a dictionary of Field objects keyed by name
fields = initialize_fields()

#
# unique_fields is a list of fields whose values uniquely identify a TCP
# connection. This is used to determine whether two lines of output are
# associated with the same connection.
#
unique_fields = [fields['laddr'], fields['lport'], fields['raddr'],
                 fields['rport']]

#
# proc_fields is a list of field objects that represents the fields output by
# /proc/net/stats_tcp. The order of the objects in this list is the same as the
# order in which the associated fields are output in the file.
#
proc_fields = discover_proc_fields(stats_filename)

#
# output_fields is the list of fields that connstat will output. There is a set
# of fields that is output by default, and this can be overridden by using the
# -o option.
#
if not args.FIELDS:
    output_fields = [fields['laddr'], fields['lport'], fields['raddr'],
                     fields['rport'], fields['state']]
else:
    output_fields = []
    if args.FIELDS == 'all':
        for name, field in fields.items():
            #
            # If the kernel doesn't output that field, then don't include
            # it in output_fields.
            #
            if field.index != -1:
                output_fields.append(field)
    else:
        field_names = fields.keys()
        output_list = args.FIELDS.split(',')
        for ofname in output_list:
            if ofname not in field_names:
                sys.exit('Unknown field: \'' + ofname + '\'')

            field = fields[ofname]
            if field.index == -1:
                sys.exit('This kernel does not support field \'' +
                         ofname + '\'')
            else:
                output_fields.append(field)

if args.established:
    fields['state'].filter = 'ESTABLISHED'

if args.filter:
    filter_list = args.filter.split(',')
    for item in filter_list:
        fvlist = item.split('=')
        fields[fvlist[0]].filter = fvlist[1]

if args.parsable:
    if not args.FIELDS:
        sys.exit('parsable output requires \'-o\'')
    if args.FIELDS == 'all':
        sys.exit('\'-o all\' is invalid with parsable output')

while True:
    output = ""
    if args.TS_TYPE:
        timenow = time.time()
        if args.parsable:
            output = "= "
        if args.TS_TYPE == 'u':
            output += str(int(timenow)) + "\n"
        elif args.TS_TYPE == 'd':
            dtnow = datetime.fromtimestamp(timenow).replace(microsecond=0)
            output += dtnow.isoformat() + "\n"

    output += connstat_regurgitate(stats_filename)
    print(output, end="")
    sys.stdout.flush()

    if not args.SECONDS:
        break

    if args.count:
        count_index -= 1
        if count_index == 0:
            break

    if not test_mode:
        try:
            time.sleep(args.SECONDS)
        except KeyboardInterrupt:
            exit(0)
